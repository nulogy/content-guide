{"version":3,"sources":["webpack://nulogy.design/./src/pages/grammar-and-mechanics/dates-and-times.mdx","webpack://nulogy.design/./src/components/MDXComponents.js","webpack://nulogy.design/./src/components/MarkdownRenderer.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","NoExample","YesExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","justifyContent","maxWidth","COPY_WIDTH","m","mb","href","isMDXComponent","children","fontStyle","display","position","top","icon","color","mr","h1","h2","mt","mx","h3","h4","p","blockquote","fontSize","ul","li","a","table","style","width","textAlign","margin","Alert","Heading2"],"mappings":"iQAUaA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,cAASC,KAGZG,EAAYL,EAAc,aAC1BM,EAAaN,EAAc,cAC3BO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGT,GACF,yBACD,OAAO,QAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,eAI5E,sCACA,4BACA,qRACA,uTACA,sWACA,QAAC,KAAD,CAAMC,eAAe,gBAAgBC,SAAUC,KAAYC,EAAE,SAASC,GAAG,KAAKL,QAAQ,SACxF,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,iCADF,WAGA,QAAC,KAAD,CAAMA,QAAQ,SACZ,kCADF,WAGA,QAAC,KAAD,CAAMA,QAAQ,SACZ,+BADF,YAIF,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,+BADF,WAGA,QAAC,KAAD,CAAMA,QAAQ,SACZ,6BADF,WAGA,QAAC,KAAD,CAAMA,QAAQ,SACZ,8BADF,aAIF,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,8BADF,YAGA,QAAC,KAAD,CAAMA,QAAQ,SACZ,gCADF,WAGA,QAAC,KAAD,CAAMA,QAAQ,SACZ,mCADF,aAIF,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,iCADF,WAGA,QAAC,KAAD,CAAMA,QAAQ,SACZ,kCADF,WAGA,QAAC,KAAD,CAAMA,QAAQ,SACZ,kCADF,aAKA,4HACA,QAAC,KAAD,CAAMC,eAAe,gBAAgBC,SAAUC,KAAYC,EAAE,SAASC,GAAG,KAAKL,QAAQ,SACxF,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACP,EAAD,CAAWO,QAAQ,aAAnB,iBAGJ,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACN,EAAD,CAAYM,QAAQ,cAApB,oBAIF,0OACA,QAACP,EAAD,CAAWO,QAAQ,aAAnB,uDACA,QAACN,EAAD,CAAYM,QAAQ,cAApB,iEACA,mCACA,0QACA,4BACA,umBACA,QAAC,KAAD,CAAMC,eAAe,gBAAgBC,SAAUC,KAAYC,EAAE,SAASC,GAAG,KAAKL,QAAQ,SACxF,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACP,EAAD,CAAWO,QAAQ,aAAnB,eAGJ,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACN,EAAD,CAAYM,QAAQ,cAApB,aAIF,qNACA,QAAC,KAAD,CAAMC,eAAe,gBAAgBC,SAAUC,KAAYC,EAAE,SAASC,GAAG,KAAKL,QAAQ,SACxF,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACP,EAAD,CAAWO,QAAQ,aAAnB,eAGJ,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACN,EAAD,CAAYM,QAAQ,cAApB,eAIF,wNACA,QAAC,KAAD,CAAMC,eAAe,gBAAgBC,SAAUC,KAAYC,EAAE,SAASC,GAAG,KAAKL,QAAQ,SACxF,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACP,EAAD,CAAWO,QAAQ,aAAnB,eAGJ,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACN,EAAD,CAAYM,QAAQ,cAApB,iBAIF,QAAC,KAAD,CAAMC,eAAe,gBAAgBC,SAAUC,KAAYC,EAAE,SAASC,GAAG,KAAKL,QAAQ,SACxF,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACP,EAAD,CAAWO,QAAQ,aAAnB,kBAGJ,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACN,EAAD,CAAYM,QAAQ,cAApB,mBAIF,sCACA,6GACA,QAAC,KAAD,CAAMC,eAAe,gBAAgBC,SAAUC,KAAYC,EAAE,SAASC,GAAG,KAAKL,QAAQ,SACxF,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACP,EAAD,CAAWO,QAAQ,aAAnB,yBAGJ,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACN,EAAD,CAAYM,QAAQ,cAApB,yBAIF,6GACA,QAACP,EAAD,CAAWO,QAAQ,aAAnB,yDAGA,QAACN,EAAD,CAAYM,QAAQ,cAApB,sEAGA,6BACA,qNACA,iCACA,QAAC,KAAD,CAAMC,eAAe,gBAAgBC,SAAUC,KAAYC,EAAE,SAASC,GAAG,KAAKL,QAAQ,SACxF,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACP,EAAD,CAAWO,QAAQ,aAAnB,gCAGJ,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACN,EAAD,CAAYM,QAAQ,cAApB,kCAIF,QAAC,KAAD,CAAMC,eAAe,gBAAgBC,SAAUC,KAAYC,EAAE,SAASC,GAAG,KAAKL,QAAQ,SACxF,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACP,EAAD,CAAWO,QAAQ,aAAnB,mBAGJ,QAAC,KAAD,CAAKA,QAAQ,QACX,QAAC,KAAD,CAAMA,QAAQ,SACZ,QAACN,EAAD,CAAYM,QAAQ,cAApB,qBAIF,oCACA,QAACP,EAAD,CAAWO,QAAQ,aAAnB,qEAGA,QAACN,EAAD,CAAYM,QAAQ,cAApB,2EAGA,QAACP,EAAD,CAAWO,QAAQ,aAAnB,mFAGA,QAACN,EAAD,CAAYM,QAAQ,cAApB,yFAGA,mCACA,uQACA,yHAA2G,aAAGM,KAAK,kDAAR,kBAA3G,kLAKJR,EAAWS,gBAAiB,G,wHCzNfb,EAAa,SAAC,GAAD,IAAGc,EAAH,EAAGA,SAAalB,GAAhB,8BACxB,gBAAC,KAAD,eAAKmB,UAAU,UAAanB,GAC1B,gBAAC,KAAD,CAAKoB,QAAQ,SAASC,SAAS,WAAWC,IAAI,QAC5C,gBAAC,KAAD,CAAMC,KAAK,QAAQC,MAAM,QAAQC,GAAG,QAErCP,IAIQf,EAAY,SAAC,GAAD,IAAGe,EAAH,EAAGA,SAAalB,GAAhB,8BACvB,gBAAC,KAAD,eAAKmB,UAAU,UAAanB,GAC1B,gBAAC,KAAD,CAAKoB,QAAQ,SAASC,SAAS,WAAWC,IAAI,QAC5C,gBAAC,KAAD,CAAMC,KAAK,QAAQC,MAAM,MAAMC,GAAG,QAEnCP,IC0DL,MA3DA,YAAyC,IAAbA,EAAY,EAAZA,SAC1B,OACE,gBAAC,KAAD,CACET,WAAY,CACViB,GAAI,SAAC1B,GAAD,OAAW,gBAAC,KAAD,eAAUY,SAAUC,KAAYC,EAAE,UAAad,KAC9D2B,GAAI,SAAC3B,GAAD,OACF,gBAAC,KAAD,eAAUY,SAAUC,KAAYe,GAAG,KAAKC,GAAG,QAAW7B,KAExD8B,GAAI,SAAC9B,GAAD,OACF,gBAAC,KAAD,eAAUY,SAAUC,KAAYe,GAAG,KAAKC,GAAG,QAAW7B,KAExD+B,GAAI,SAAC/B,GAAD,OACF,gBAAC,KAAD,eAAUY,SAAUC,KAAYe,GAAG,KAAKC,GAAG,QAAW7B,KAExDgC,EAAG,SAAChC,GAAD,OACD,gBAAC,KAAD,eAAMY,SAAUC,KAAYE,GAAG,KAAKc,GAAG,QAAW7B,KAEpDiC,WAAY,SAACjC,GAAD,OACV,gBAAC,KAAD,eACEY,SAAUC,KACVqB,SAAS,OACTnB,GAAG,KACHc,GAAG,QACC7B,KAGRmC,GAAI,SAACnC,GAAD,OACF,gBAAC,KAAD,eAAMY,SAAUC,KAAYE,GAAG,KAAKc,GAAG,QAAW7B,KAEpDoC,GAAI,SAACpC,GAAD,OAAW,gBAAC,KAAD,eAAUY,SAAUC,MAAgBb,KACnDqC,EAAG,SAACrC,GAAD,OAAW,gBAAC,KAAD,eAAMY,SAAUC,MAAgBb,KAC9CsC,MAAO,SAACtC,GAAD,OACL,uCACEuC,MAAO,CACLC,MAAO,OACPC,UAAW,OACX7B,SAAUC,KACV6B,OAAQ,cAEN1C,KAGR2C,MAAO,SAAC3C,GAAD,OACL,gBAAC,KAAD,eAAOY,SAAUC,KAAYC,EAAE,SAASC,GAAG,MAASf,KAEtDI,WAAY,SAACJ,GAAD,OACV,gBAAC,EAAD,eAAYY,SAAUC,KAAYC,EAAE,SAASC,GAAG,MAASf,KAE3DG,UAAW,SAACH,GAAD,OACT,gBAAC,EAAD,eAAWY,SAAUC,KAAYC,EAAE,SAASC,GAAG,MAASf,KAE1D4C,gBAGD1B","file":"component---src-pages-grammar-and-mechanics-dates-and-times-mdx-8795b777dc76e0106cc0.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/content-guide/content-guide/src/components/MarkdownRenderer.js\";\nimport { Flex, Box, Text } from \"@nulogy/components\";\nimport { COPY_WIDTH } from \"../../components/CONSTANTS.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst NoExample = makeShortcode(\"NoExample\");\nconst YesExample = makeShortcode(\"YesExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>{`Dates and times`}</h1>\n    <h2>{`Dates`}</h2>\n    <p>{`Formatting dates and times can be tricky because the standards differ from country to country. Nulogy is a company that services customers from around the world, so we need to ensure that the dates we list in our softwares are consistent and recognizable.`}</p>\n    <p>{`The ISO (International Organization for Standardization) states that the international standard is YYYY-MM-DD. This standard is not adopted in every single country around the world, but it does offer us the safest route to ensure that the dates listed in our applications are easy to read.`}</p>\n    <p>{`Given that the ISO date format is not fully adopted worldwide, Nulogy goes a step further to ensure that dates are understandable with no margin for misinterpretation. In order to avoid users confusing the two digits that represent the month and the two digits to represent the day, we represent the month in their MLA abbreviated form:`}</p>\n    <Flex justifyContent=\"space-between\" maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" mdxType=\"Flex\">\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <strong>January</strong> - Jan\n    </Text>\n    <Text mdxType=\"Text\">\n      <strong>February</strong> - Feb\n    </Text>\n    <Text mdxType=\"Text\">\n      <strong>March</strong> - Mar\n    </Text>\n  </Box>\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <strong>April</strong> - Apr\n    </Text>\n    <Text mdxType=\"Text\">\n      <strong>May</strong> - May\n    </Text>\n    <Text mdxType=\"Text\">\n      <strong>June</strong> - June\n    </Text>\n  </Box>\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <strong>July</strong> - July\n    </Text>\n    <Text mdxType=\"Text\">\n      <strong>August</strong> - Aug\n    </Text>\n    <Text mdxType=\"Text\">\n      <strong>September</strong> - Sept\n    </Text>\n  </Box>\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <strong>October</strong> - Oct\n    </Text>\n    <Text mdxType=\"Text\">\n      <strong>November</strong> - Nov\n    </Text>\n    <Text mdxType=\"Text\">\n      <strong>December</strong> - Dec\n    </Text>\n  </Box>\n    </Flex>\n    <p>{`For example, November 4th, 2021 would read as 2021-Nov-04. July 28th, 2025 would read as 2025-Jul-28. `}</p>\n    <Flex justifyContent=\"space-between\" maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" mdxType=\"Flex\">\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <NoExample mdxType=\"NoExample\">2023-06-03</NoExample>\n    </Text>\n  </Box>\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <YesExample mdxType=\"YesExample\">2023-June-03</YesExample>\n    </Text>\n  </Box>\n    </Flex>\n    <p>{`Dates appearing in a sentence are one of two exceptions to this formatting rule. They are written out in full to ensure our overall voice remains professional and understandable. Month abbreviations are not used.`}</p>\n    <NoExample mdxType=\"NoExample\">Join us for Nulogy xChange, beginning 2021-Oct-19.</NoExample>\n    <YesExample mdxType=\"YesExample\">Join us for Nulogy xChange, beginning on October 19th, 2021.</YesExample>\n    <h2>{`Expiry Dates`}</h2>\n    <p>{`Expiry dates are another exception to the date formatting rule. These standards are often set by brands or suppliers, requiring customization on the part of the user. As such, expiry date formats can be configured by the user in their settings.`}</p>\n    <h2>{`Times`}</h2>\n    <p>{`The ISO standard for representing time is HH:MM:SS (hour:minute:second). This is a format that is recognized internationally. Where countries differ is on the use of the 12 hour clock or the 24 hour clock. English speaking countries tend to lean towards the 12 hour clock, but have an understanding of the 24 hour clock. This is why Nulogy adopts the 24 hour clock as the standard. Our default formatting drops the use of the seconds from the ISO formatting, as that information does not add value to our customers in most cases. However, they can be added in situations that benefit the user.`}</p>\n    <Flex justifyContent=\"space-between\" maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" mdxType=\"Flex\">\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <NoExample mdxType=\"NoExample\">12:30:43</NoExample>\n    </Text>\n  </Box>\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <YesExample mdxType=\"YesExample\">12:30</YesExample>\n    </Text>\n  </Box>\n    </Flex>\n    <p>{`In some of our applications, we offer the user the option to specify the use of the 12 hour clock in their settings. In this case a capitalized AM or PM is added onto the HH:MM after a space.`}</p>\n    <Flex justifyContent=\"space-between\" maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" mdxType=\"Flex\">\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <NoExample mdxType=\"NoExample\">7:36p.m.</NoExample>\n    </Text>\n  </Box>\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <YesExample mdxType=\"YesExample\">7:36 PM</YesExample>\n    </Text>\n  </Box>\n    </Flex>\n    <p>{`If a time zone is required, the three letter abbreviation is added after the time, separated by a space. Where possible, the user’s local time is used as the default with no time zone specified.`}</p>\n    <Flex justifyContent=\"space-between\" maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" mdxType=\"Flex\">\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <NoExample mdxType=\"NoExample\">18:12 ET</NoExample>\n    </Text>\n  </Box>\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <YesExample mdxType=\"YesExample\">18:12 EST</YesExample>\n    </Text>\n  </Box>\n    </Flex>\n    <Flex justifyContent=\"space-between\" maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" mdxType=\"Flex\">\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <NoExample mdxType=\"NoExample\">4:29 MST PM</NoExample>\n    </Text>\n  </Box>\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <YesExample mdxType=\"YesExample\">4:29 PM MST</YesExample>\n    </Text>\n  </Box>\n    </Flex>\n    <h2>{`Dates and times`}</h2>\n    <p>{`When a date and time are listed together, we list the date first, followed by the time.`}</p>\n    <Flex justifyContent=\"space-between\" maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" mdxType=\"Flex\">\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <NoExample mdxType=\"NoExample\">23:11; 2023-May-20</NoExample>\n    </Text>\n  </Box>\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <YesExample mdxType=\"YesExample\">2023-May-20 23:11</YesExample>\n    </Text>\n  </Box>\n    </Flex>\n    <p>{`In a full sentence, we use additional words such as “on” and “at” to help readability. `}</p>\n    <NoExample mdxType=\"NoExample\">\n  This bill of materials was edited 19:22 Nov 4, 2021.\n    </NoExample>\n    <YesExample mdxType=\"YesExample\">\n  This bill of materials was edited on November 4th, 2021 at 19:22.\n    </YesExample>\n    <h2>{`Ranges`}</h2>\n    <p>{`When listing a date or time range, the beginning date/time and ending date/time are seperated by the word “to”. This is to avoid confusion with the dashes from the standalone date formating. `}</p>\n    <p>{`Standalone:`}</p>\n    <Flex justifyContent=\"space-between\" maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" mdxType=\"Flex\">\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <NoExample mdxType=\"NoExample\">2021-Oct-19 - 2021-Oct-21</NoExample>\n    </Text>\n  </Box>\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <YesExample mdxType=\"YesExample\">2021-Oct-19 to 2021-Oct-21</YesExample>\n    </Text>\n  </Box>\n    </Flex>\n    <Flex justifyContent=\"space-between\" maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" mdxType=\"Flex\">\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <NoExample mdxType=\"NoExample\">8:00 - 16:00</NoExample>\n    </Text>\n  </Box>\n  <Box mdxType=\"Box\">\n    <Text mdxType=\"Text\">\n      <YesExample mdxType=\"YesExample\">8:00 to 16:00</YesExample>\n    </Text>\n  </Box>\n    </Flex>\n    <p>{`In a sentence:`}</p>\n    <NoExample mdxType=\"NoExample\">\n  Nulogy xChange will run October 19th, 2021 - October 21st, 2021.\n    </NoExample>\n    <YesExample mdxType=\"YesExample\">\n  Nulogy xChange will run from October 19th, 2021 to October 21st, 2021.\n    </YesExample>\n    <NoExample mdxType=\"NoExample\">\n  Nulogy’s vision retreat will be from 9:00 AM - 10:00 PM on January 20th, 2022. \n    </NoExample>\n    <YesExample mdxType=\"YesExample\">\n  Nulogy’s vision retreat will be held on January 20th, 2022 from 9:00 AM to 10:00 PM.\n    </YesExample>\n    <h2>{`Translations`}</h2>\n    <p>{`Date and time formatting does not change for differing languages or locales, as they are formatted specifically to the international standard. This is purposeful to reduce complexity internally and for users with sites in multiple countries.`}</p>\n    <p>{`When translating, be sure that the month is written or abbreviated in the correct language. See the `}<a href=\"https://web.library.yale.edu/cataloging/months\">{`Yale Catalogue`}</a>{` for accepted month abbreviaitons in other Latin alphabet languages. Note that given Nulogy’s default date formatting, the month’s ending appreviation period (.) is dropped.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\";\nimport { Icon, Box } from \"@nulogy/components\";\n\nexport const YesExample = ({ children, ...props }) => (\n  <Box fontStyle=\"italic\" {...props}>\n    <Box display=\"inline\" position=\"relative\" top=\"half\">\n      <Icon icon=\"check\" color=\"green\" mr=\"x2\" />\n    </Box>\n    {children}\n  </Box>\n);\n\nexport const NoExample = ({ children, ...props }) => (\n  <Box fontStyle=\"italic\" {...props}>\n    <Box display=\"inline\" position=\"relative\" top=\"half\">\n      <Icon icon=\"close\" color=\"red\" mr=\"x2\" />\n    </Box>\n    {children}\n  </Box>\n);\n","import React from \"react\";\nimport { MDXProvider } from \"@mdx-js/react\";\nimport {\n  Alert,\n  Text,\n  Link,\n  List,\n  ListItem,\n  Heading1,\n  Heading2,\n  Heading3,\n  Heading4,\n} from \"@nulogy/components\";\nimport { COPY_WIDTH } from \"./CONSTANTS\";\nimport { YesExample, NoExample } from \"./MDXComponents\";\n\nfunction MarkdownRenderer({ children }) {\n  return (\n    <MDXProvider\n      components={{\n        h1: (props) => <Heading1 maxWidth={COPY_WIDTH} m=\"0 auto\" {...props} />,\n        h2: (props) => (\n          <Heading2 maxWidth={COPY_WIDTH} mt=\"x6\" mx=\"auto\" {...props} />\n        ),\n        h3: (props) => (\n          <Heading3 maxWidth={COPY_WIDTH} mt=\"x4\" mx=\"auto\" {...props} />\n        ),\n        h4: (props) => (\n          <Heading4 maxWidth={COPY_WIDTH} mt=\"x4\" mx=\"auto\" {...props} />\n        ),\n        p: (props) => (\n          <Text maxWidth={COPY_WIDTH} mb=\"x4\" mx=\"auto\" {...props} />\n        ),\n        blockquote: (props) => (\n          <Text\n            maxWidth={COPY_WIDTH}\n            fontSize=\"24px\"\n            mb=\"x4\"\n            mx=\"auto\"\n            {...props}\n          />\n        ),\n        ul: (props) => (\n          <List maxWidth={COPY_WIDTH} mb=\"x4\" mx=\"auto\" {...props} />\n        ),\n        li: (props) => <ListItem maxWidth={COPY_WIDTH} {...props} />,\n        a: (props) => <Link maxWidth={COPY_WIDTH} {...props} />,\n        table: (props) => (\n          <table\n            style={{\n              width: \"100%\",\n              textAlign: \"left\",\n              maxWidth: COPY_WIDTH,\n              margin: \"32px auto\",\n            }}\n            {...props}\n          />\n        ),\n        Alert: (props) => (\n          <Alert maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" {...props} />\n        ),\n        YesExample: (props) => (\n          <YesExample maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x2\" {...props} />\n        ),\n        NoExample: (props) => (\n          <NoExample maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x2\" {...props} />\n        ),\n        Heading2,\n      }}\n    >\n      {children}\n    </MDXProvider>\n  );\n}\n\nexport default MarkdownRenderer;\n"],"sourceRoot":""}