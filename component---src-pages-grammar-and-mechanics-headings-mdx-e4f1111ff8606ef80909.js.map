{"version":3,"sources":["webpack://nulogy.design/./src/pages/grammar-and-mechanics/headings.mdx","webpack://nulogy.design/./src/components/MDXComponents.js","webpack://nulogy.design/./src/components/MarkdownRenderer.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","NoExample","Heading2","YesExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","inline","isMDXComponent","children","fontStyle","display","position","top","icon","color","mr","h1","maxWidth","COPY_WIDTH","m","h2","mt","mx","h3","h4","p","mb","blockquote","fontSize","ul","li","a","table","style","width","textAlign","margin","Alert"],"mappings":"8OAQaA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,cAASC,KAGZG,EAAYL,EAAc,aAC1BM,EAAWN,EAAc,YACzBO,EAAaP,EAAc,cAC3BQ,EAAc,CAClBT,gBAEIU,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGV,GACF,yBACD,OAAO,QAACO,EAAD,iBAAeD,EAAiBN,EAAhC,CAAuCU,WAAYA,EAAYC,QAAQ,eAG5E,+CACA,uKACA,mYACA,8OACA,QAACR,EAAD,CAAWQ,QAAQ,cACrB,QAACP,EAAD,CAAUQ,QAAM,EAACD,QAAQ,YAAzB,qBAEE,QAACN,EAAD,CAAYM,QAAQ,eACtB,QAACP,EAAD,CAAUQ,QAAM,EAACD,QAAQ,YAAzB,oBAMFF,EAAWI,gBAAiB,G,wHCxCfR,EAAa,SAAC,GAAD,IAAGS,EAAH,EAAGA,SAAad,GAAhB,8BACxB,gBAAC,KAAD,eAAKe,UAAU,UAAaf,GAC1B,gBAAC,KAAD,CAAKgB,QAAQ,SAASC,SAAS,WAAWC,IAAI,QAC5C,gBAAC,KAAD,CAAMC,KAAK,QAAQC,MAAM,QAAQC,GAAG,QAErCP,IAIQX,EAAY,SAAC,GAAD,IAAGW,EAAH,EAAGA,SAAad,GAAhB,8BACvB,gBAAC,KAAD,eAAKe,UAAU,UAAaf,GAC1B,gBAAC,KAAD,CAAKgB,QAAQ,SAASC,SAAS,WAAWC,IAAI,QAC5C,gBAAC,KAAD,CAAMC,KAAK,QAAQC,MAAM,MAAMC,GAAG,QAEnCP,IC0DL,MA3DA,YAAyC,IAAbA,EAAY,EAAZA,SAC1B,OACE,gBAAC,KAAD,CACEJ,WAAY,CACVY,GAAI,SAACtB,GAAD,OAAW,gBAAC,KAAD,eAAUuB,SAAUC,KAAYC,EAAE,UAAazB,KAC9D0B,GAAI,SAAC1B,GAAD,OACF,gBAAC,KAAD,eAAUuB,SAAUC,KAAYG,GAAG,KAAKC,GAAG,QAAW5B,KAExD6B,GAAI,SAAC7B,GAAD,OACF,gBAAC,KAAD,eAAUuB,SAAUC,KAAYG,GAAG,KAAKC,GAAG,QAAW5B,KAExD8B,GAAI,SAAC9B,GAAD,OACF,gBAAC,KAAD,eAAUuB,SAAUC,KAAYG,GAAG,KAAKC,GAAG,QAAW5B,KAExD+B,EAAG,SAAC/B,GAAD,OACD,gBAAC,KAAD,eAAMuB,SAAUC,KAAYQ,GAAG,KAAKJ,GAAG,QAAW5B,KAEpDiC,WAAY,SAACjC,GAAD,OACV,gBAAC,KAAD,eACEuB,SAAUC,KACVU,SAAS,OACTF,GAAG,KACHJ,GAAG,QACC5B,KAGRmC,GAAI,SAACnC,GAAD,OACF,gBAAC,KAAD,eAAMuB,SAAUC,KAAYQ,GAAG,KAAKJ,GAAG,QAAW5B,KAEpDoC,GAAI,SAACpC,GAAD,OAAW,gBAAC,KAAD,eAAUuB,SAAUC,MAAgBxB,KACnDqC,EAAG,SAACrC,GAAD,OAAW,gBAAC,KAAD,eAAMuB,SAAUC,MAAgBxB,KAC9CsC,MAAO,SAACtC,GAAD,OACL,uCACEuC,MAAO,CACLC,MAAO,OACPC,UAAW,OACXlB,SAAUC,KACVkB,OAAQ,cAEN1C,KAGR2C,MAAO,SAAC3C,GAAD,OACL,gBAAC,KAAD,eAAOuB,SAAUC,KAAYC,EAAE,SAASO,GAAG,MAAShC,KAEtDK,WAAY,SAACL,GAAD,OACV,gBAAC,EAAD,eAAYuB,SAAUC,KAAYC,EAAE,SAASO,GAAG,MAAShC,KAE3DG,UAAW,SAACH,GAAD,OACT,gBAAC,EAAD,eAAWuB,SAAUC,KAAYC,EAAE,SAASO,GAAG,MAAShC,KAE1DI,gBAGDU","file":"component---src-pages-grammar-and-mechanics-headings-mdx-e4f1111ff8606ef80909.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/content-guide/content-guide/src/components/MarkdownRenderer.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst NoExample = makeShortcode(\"NoExample\");\nconst Heading2 = makeShortcode(\"Heading2\");\nconst YesExample = makeShortcode(\"YesExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Headings and subheadings`}</h1>\n    <p>{`Headings should always be used to describe any text or interactions that can be achieved in the body below. They should be short and descriptive.`}</p>\n    <p>{`Subheadings are not always necessary. They are most useful when the concept introduced in the heading can be broken down further into more specific or descriptive parts. For example, if I need to break up text on the job page in the Operational Solution, I might include the subheadings “manual entry”, “time records” and “breaks” under the heading “time tracking”.`}</p>\n    <p>{`Headings and subheadings are sentence case and do not include punctuation. You may add a question mark if the heading poses a question that is answered in the body copy. This may be most common in help desk articles.`}</p>\n    <NoExample mdxType=\"NoExample\">\n  <Heading2 inline mdxType=\"Heading2\">Assign Pallets.</Heading2>\n    </NoExample>\n    <YesExample mdxType=\"YesExample\">\n  <Heading2 inline mdxType=\"Heading2\">Assign pallets</Heading2>\n    </YesExample>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\";\nimport { Icon, Box } from \"@nulogy/components\";\n\nexport const YesExample = ({ children, ...props }) => (\n  <Box fontStyle=\"italic\" {...props}>\n    <Box display=\"inline\" position=\"relative\" top=\"half\">\n      <Icon icon=\"check\" color=\"green\" mr=\"x2\" />\n    </Box>\n    {children}\n  </Box>\n);\n\nexport const NoExample = ({ children, ...props }) => (\n  <Box fontStyle=\"italic\" {...props}>\n    <Box display=\"inline\" position=\"relative\" top=\"half\">\n      <Icon icon=\"close\" color=\"red\" mr=\"x2\" />\n    </Box>\n    {children}\n  </Box>\n);\n","import React from \"react\";\nimport { MDXProvider } from \"@mdx-js/react\";\nimport {\n  Alert,\n  Text,\n  Link,\n  List,\n  ListItem,\n  Heading1,\n  Heading2,\n  Heading3,\n  Heading4,\n} from \"@nulogy/components\";\nimport { COPY_WIDTH } from \"./CONSTANTS\";\nimport { YesExample, NoExample } from \"./MDXComponents\";\n\nfunction MarkdownRenderer({ children }) {\n  return (\n    <MDXProvider\n      components={{\n        h1: (props) => <Heading1 maxWidth={COPY_WIDTH} m=\"0 auto\" {...props} />,\n        h2: (props) => (\n          <Heading2 maxWidth={COPY_WIDTH} mt=\"x6\" mx=\"auto\" {...props} />\n        ),\n        h3: (props) => (\n          <Heading3 maxWidth={COPY_WIDTH} mt=\"x4\" mx=\"auto\" {...props} />\n        ),\n        h4: (props) => (\n          <Heading4 maxWidth={COPY_WIDTH} mt=\"x4\" mx=\"auto\" {...props} />\n        ),\n        p: (props) => (\n          <Text maxWidth={COPY_WIDTH} mb=\"x4\" mx=\"auto\" {...props} />\n        ),\n        blockquote: (props) => (\n          <Text\n            maxWidth={COPY_WIDTH}\n            fontSize=\"24px\"\n            mb=\"x4\"\n            mx=\"auto\"\n            {...props}\n          />\n        ),\n        ul: (props) => (\n          <List maxWidth={COPY_WIDTH} mb=\"x4\" mx=\"auto\" {...props} />\n        ),\n        li: (props) => <ListItem maxWidth={COPY_WIDTH} {...props} />,\n        a: (props) => <Link maxWidth={COPY_WIDTH} {...props} />,\n        table: (props) => (\n          <table\n            style={{\n              width: \"100%\",\n              textAlign: \"left\",\n              maxWidth: COPY_WIDTH,\n              margin: \"32px auto\",\n            }}\n            {...props}\n          />\n        ),\n        Alert: (props) => (\n          <Alert maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" {...props} />\n        ),\n        YesExample: (props) => (\n          <YesExample maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x2\" {...props} />\n        ),\n        NoExample: (props) => (\n          <NoExample maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x2\" {...props} />\n        ),\n        Heading2,\n      }}\n    >\n      {children}\n    </MDXProvider>\n  );\n}\n\nexport default MarkdownRenderer;\n"],"sourceRoot":""}