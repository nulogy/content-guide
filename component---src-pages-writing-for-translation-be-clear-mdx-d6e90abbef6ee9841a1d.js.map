{"version":3,"sources":["webpack://nulogy.design/./src/pages/writing-for-translation/be-clear.mdx","webpack://nulogy.design/./src/components/MDXComponents.js","webpack://nulogy.design/./src/components/MarkdownRenderer.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","YesExample","NoExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","mb","isMDXComponent","children","fontStyle","display","position","top","icon","color","mr","h1","maxWidth","COPY_WIDTH","m","h2","mt","mx","h3","h4","p","blockquote","fontSize","ul","li","a","table","style","width","textAlign","margin","Alert","Heading2"],"mappings":"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","file":"component---src-pages-writing-for-translation-be-clear-mdx-d6e90abbef6ee9841a1d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/content-guide/content-guide/src/components/MarkdownRenderer.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst YesExample = makeShortcode(\"YesExample\");\nconst NoExample = makeShortcode(\"NoExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Be clear`}</h1>\n    <p>{`While we want to keep our language concise, certain words that in English appear as if they can be cut will help with clarity if they are included.`}</p>\n    <p>{`Repeated verbs and subjects can help when it comes to translations. For example:`}</p>\n    <YesExample mdxType=\"YesExample\">\n  Users have the option <strong>to pick materials</strong> in our mobile\n  interface or to pick materials in our desktop interface.\n    </YesExample>\n    <YesExample mb=\"x4\" mdxType=\"YesExample\">\n  Bills of materials <strong>can be</strong> drafted manually in the Operational\n  Solution or <strong>can be</strong> uploaded via csv.\n    </YesExample>\n    <p>{`In addition to the inclusion of repeated subject and verbs, it is also best practice to leave in words like “then”, “a”, “that”, “the”, and “to” even if they seem like they can be cut. For example:`}</p>\n    <YesExample mdxType=\"YesExample\">\n  Our products help our users <strong>to</strong> achieve efficiency,\n  innovation, and sustainability.\n    </YesExample>\n    <YesExample mb=\"x4\" mdxType=\"YesExample\">\n  If you have not entered labor on your job, <strong>then</strong> you may not\n  be able to enter production.\n    </YesExample>\n    <p>{`Avoid words with multiple meanings. Some English words can mean many different things, which can result in confusing or wrong translations. Choose words that are specific and unambiguous. For example:`}</p>\n    <NoExample mdxType=\"NoExample\">\n  You have <strong>reached</strong> the maximum expansion.\n    </NoExample>\n    <YesExample mb=\"x4\" mdxType=\"YesExample\">\n  You have expanded as many items as can be displayed.\n    </YesExample>\n    <p>{`In context, the verb “reach” makes sense. But reach is also a physical verb that can refer to the action of extending your arm to grab for something. The new sentence is slightly longer, but it is more clear.`}</p>\n    <p>{`Finally, avoid words ending in “-ing”. Many different classifications of words in the English language add the “-ing” suffix. This includes nouns, verbs, adjectives, etc. Because of this, these types of words will often be translated in the same way even if the context requires different handling. Take care to edit your sentences to avoid the use of “-ing” words wherever possible. For example:`}</p>\n    <NoExample mdxType=\"NoExample\">This report has completed processing.</NoExample>\n    <YesExample mdxType=\"YesExample\">This report has been processed.</YesExample>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\";\nimport { Icon, Box } from \"@nulogy/components\";\n\nexport const YesExample = ({ children, ...props }) => (\n  <Box fontStyle=\"italic\" {...props}>\n    <Box display=\"inline\" position=\"relative\" top=\"half\">\n      <Icon icon=\"check\" color=\"green\" mr=\"x2\" />\n    </Box>\n    {children}\n  </Box>\n);\n\nexport const NoExample = ({ children, ...props }) => (\n  <Box fontStyle=\"italic\" {...props}>\n    <Box display=\"inline\" position=\"relative\" top=\"half\">\n      <Icon icon=\"close\" color=\"red\" mr=\"x2\" />\n    </Box>\n    {children}\n  </Box>\n);\n","import React from \"react\";\nimport { MDXProvider } from \"@mdx-js/react\";\nimport {\n  Alert,\n  Text,\n  Link,\n  List,\n  ListItem,\n  Heading1,\n  Heading2,\n  Heading3,\n  Heading4,\n} from \"@nulogy/components\";\nimport { COPY_WIDTH } from \"./CONSTANTS\";\nimport { YesExample, NoExample } from \"./MDXComponents\";\n\nfunction MarkdownRenderer({ children }) {\n  return (\n    <MDXProvider\n      components={{\n        h1: (props) => <Heading1 maxWidth={COPY_WIDTH} m=\"0 auto\" {...props} />,\n        h2: (props) => (\n          <Heading2 maxWidth={COPY_WIDTH} mt=\"x6\" mx=\"auto\" {...props} />\n        ),\n        h3: (props) => (\n          <Heading3 maxWidth={COPY_WIDTH} mt=\"x4\" mx=\"auto\" {...props} />\n        ),\n        h4: (props) => (\n          <Heading4 maxWidth={COPY_WIDTH} mt=\"x4\" mx=\"auto\" {...props} />\n        ),\n        p: (props) => (\n          <Text maxWidth={COPY_WIDTH} mb=\"x4\" mx=\"auto\" {...props} />\n        ),\n        blockquote: (props) => (\n          <Text\n            maxWidth={COPY_WIDTH}\n            fontSize=\"24px\"\n            mb=\"x4\"\n            mx=\"auto\"\n            {...props}\n          />\n        ),\n        ul: (props) => (\n          <List maxWidth={COPY_WIDTH} mb=\"x4\" mx=\"auto\" {...props} />\n        ),\n        li: (props) => <ListItem maxWidth={COPY_WIDTH} {...props} />,\n        a: (props) => <Link maxWidth={COPY_WIDTH} {...props} />,\n        table: (props) => (\n          <table\n            style={{\n              width: \"100%\",\n              textAlign: \"left\",\n              maxWidth: COPY_WIDTH,\n              margin: \"32px auto\",\n            }}\n            {...props}\n          />\n        ),\n        Alert: (props) => (\n          <Alert maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" {...props} />\n        ),\n        YesExample: (props) => (\n          <YesExample maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x2\" {...props} />\n        ),\n        NoExample: (props) => (\n          <NoExample maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x2\" {...props} />\n        ),\n        Heading2,\n      }}\n    >\n      {children}\n    </MDXProvider>\n  );\n}\n\nexport default MarkdownRenderer;\n"],"sourceRoot":""}