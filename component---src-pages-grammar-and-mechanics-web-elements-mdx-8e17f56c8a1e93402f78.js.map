{"version":3,"sources":["webpack://nulogy.design/./src/pages/grammar-and-mechanics/web-elements.mdx","webpack://nulogy.design/./src/components/MDXComponents.js","webpack://nulogy.design/./src/components/MarkdownRenderer.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","NoExample","YesExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","justifyContent","maxWidth","COPY_WIDTH","m","mb","href","labelText","className","parentName","isMDXComponent","children","fontStyle","display","position","top","icon","color","mr","h1","h2","mt","mx","h3","h4","p","blockquote","fontSize","ul","li","a","table","style","width","textAlign","margin","Alert","Heading2"],"mappings":"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","file":"component---src-pages-grammar-and-mechanics-web-elements-mdx-8e17f56c8a1e93402f78.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/content-guide/content-guide/src/components/MarkdownRenderer.js\";\nimport { Box, Checkbox, Flex, PrimaryButton } from \"@nulogy/components\";\nimport { COPY_WIDTH } from \"../../components/CONSTANTS.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst NoExample = makeShortcode(\"NoExample\");\nconst YesExample = makeShortcode(\"YesExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>{`Web elements`}</h1>\n    <h2>{`Buttons and links`}</h2>\n    <p>{`Both buttons and links should be written in sentence case.`}</p>\n    <Flex justifyContent=\"space-between\" maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" mdxType=\"Flex\">\n  <NoExample mdxType=\"NoExample\">\n    <PrimaryButton mdxType=\"PrimaryButton\">Manage Picking</PrimaryButton>\n  </NoExample>\n  <YesExample mdxType=\"YesExample\">\n    <PrimaryButton mdxType=\"PrimaryButton\">Manage picking</PrimaryButton>\n  </YesExample>\n    </Flex>\n    <p>{`Button text begins with an imperative verb that describes the action that will be taken (e.g. Assign pallets). Where possible, the verb should be followed by a descriptive noun.`}</p>\n    <Flex justifyContent=\"space-between\" maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" mdxType=\"Flex\">\n  <NoExample mdxType=\"NoExample\">\n    <PrimaryButton mdxType=\"PrimaryButton\">More actions</PrimaryButton>\n  </NoExample>\n  <YesExample mdxType=\"YesExample\">\n    <PrimaryButton mdxType=\"PrimaryButton\">View more actions</PrimaryButton>\n  </YesExample>\n    </Flex>\n    <p>{`Links inform the user of where they will be directed to when they click. Always use descriptive links. Never refer to a link in body copy then provide a link labelled “link”.`}</p>\n    <p>{`A good rule is to make the link text the heading of the page to which it navigates.`}</p>\n    <NoExample mdxType=\"NoExample\">\n  <a href=\"#\">Click here</a> to view the move transaction report for this job.\n    </NoExample>\n    <YesExample mdxType=\"YesExample\">\n  View the <a href=\"#\">move transaction report</a> for this job.\n    </YesExample>\n    <h2>{`Site settings`}</h2>\n    <p>{`Nulogy’s Operational Solution has many site settings that allow both our customer and internal Nulogy users to customize the experience for a given site. In order to help site setting users to easily navigate and understand the various customizable settings, we employ certain rules when writing a new site setting.`}</p>\n    <p>{`If the setting is a checkbox (as is most common), start the label with a verb. This will help the user to know what happens when the setting is enabled.`}</p>\n    <NoExample mdxType=\"NoExample\">\n  <Checkbox labelText=\"Default print pallet tags when adding production\" className=\"inline\" mdxType=\"Checkbox\" />\n    </NoExample>\n    <YesExample mdxType=\"YesExample\">\n  <Checkbox labelText=\"Default print pallet tags when adding production\" className=\"inline\" mdxType=\"Checkbox\" />\n    </YesExample>\n    <p>{`Common verbs for site settings are allow, enable, restrict, and require. A setting that takes any of these actions should always use these verbs. No synonyms.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <strong>Allow</strong> refers to a setting that permits an action that is usually\nrestricted.\n      </li>\n      <li parentName=\"ul\">\n        <strong>Enable</strong> refers to a setting that adds a new function to the interface.\n      </li>\n      <li parentName=\"ul\">\n        <strong>Restrict</strong> refers to a setting that blocks an action that is usually\nallowed.\n      </li>\n      <li parentName=\"ul\">\n        <strong>Require</strong> refers to a setting that creates a mandate.\n      </li>\n    </ul>\n    <p>{`If the setting is a form field or a dropdown, verbs are not required. These instances should be treated like a regular label and should describe the form field effectively.`}</p>\n    <p>{`Site setting labels should be kept as succinct as possible. Especially when the repercussions of a site setting is complex, it can be easy to want to write in detail. Any setting that needs elaboration should employ tooltips. In general, a site setting label should not exceed 50 characters at absolute maximum. If possible, try to cap the label at 3-4 words.`}</p>\n    <NoExample mdxType=\"NoExample\">\n  <Checkbox labelText=\"Require specifying lot and expiries for rejects that Track-by-Job\" className=\"inline\" mdxType=\"Checkbox\" />\n    </NoExample>\n    <YesExample mdxType=\"YesExample\">\n  <Checkbox labelText=\"Require lots and expiries for track by job rejects\" className=\"inline\" mdxType=\"Checkbox\" />\n    </YesExample>\n    <p>{`Tooltips can be longer to allow for expansion on complex concepts. Site setting tooltips should always be present tense and be complete sentences.`}</p>\n    <h2>{`Tooltips`}</h2>\n    <p>{`Tooltip text should always be kept short and to the point. If your message cannot be said in one or two sentences, then alternate informational methods should be considered.`}</p>\n    <p>{`Tooltips may be used to expand on text that has been truncated, or to provide quick instruction or elaboration. If it contains a full sentence, it should include proper punctuation. If it is a sentence fragment or expansion, no punctuation should be used.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\";\nimport { Icon, Box } from \"@nulogy/components\";\n\nexport const YesExample = ({ children, ...props }) => (\n  <Box fontStyle=\"italic\" {...props}>\n    <Box display=\"inline\" position=\"relative\" top=\"half\">\n      <Icon icon=\"check\" color=\"green\" mr=\"x2\" />\n    </Box>\n    {children}\n  </Box>\n);\n\nexport const NoExample = ({ children, ...props }) => (\n  <Box fontStyle=\"italic\" {...props}>\n    <Box display=\"inline\" position=\"relative\" top=\"half\">\n      <Icon icon=\"close\" color=\"red\" mr=\"x2\" />\n    </Box>\n    {children}\n  </Box>\n);\n","import React from \"react\";\nimport { MDXProvider } from \"@mdx-js/react\";\nimport {\n  Alert,\n  Text,\n  Link,\n  List,\n  ListItem,\n  Heading1,\n  Heading2,\n  Heading3,\n  Heading4,\n} from \"@nulogy/components\";\nimport { COPY_WIDTH } from \"./CONSTANTS\";\nimport { YesExample, NoExample } from \"./MDXComponents\";\n\nfunction MarkdownRenderer({ children }) {\n  return (\n    <MDXProvider\n      components={{\n        h1: (props) => <Heading1 maxWidth={COPY_WIDTH} m=\"0 auto\" {...props} />,\n        h2: (props) => (\n          <Heading2 maxWidth={COPY_WIDTH} mt=\"x6\" mx=\"auto\" {...props} />\n        ),\n        h3: (props) => (\n          <Heading3 maxWidth={COPY_WIDTH} mt=\"x4\" mx=\"auto\" {...props} />\n        ),\n        h4: (props) => (\n          <Heading4 maxWidth={COPY_WIDTH} mt=\"x4\" mx=\"auto\" {...props} />\n        ),\n        p: (props) => (\n          <Text maxWidth={COPY_WIDTH} mb=\"x4\" mx=\"auto\" {...props} />\n        ),\n        blockquote: (props) => (\n          <Text\n            maxWidth={COPY_WIDTH}\n            fontSize=\"24px\"\n            mb=\"x4\"\n            mx=\"auto\"\n            {...props}\n          />\n        ),\n        ul: (props) => (\n          <List maxWidth={COPY_WIDTH} mb=\"x4\" mx=\"auto\" {...props} />\n        ),\n        li: (props) => <ListItem maxWidth={COPY_WIDTH} {...props} />,\n        a: (props) => <Link maxWidth={COPY_WIDTH} {...props} />,\n        table: (props) => (\n          <table\n            style={{\n              width: \"100%\",\n              textAlign: \"left\",\n              maxWidth: COPY_WIDTH,\n              margin: \"32px auto\",\n            }}\n            {...props}\n          />\n        ),\n        Alert: (props) => (\n          <Alert maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" {...props} />\n        ),\n        YesExample: (props) => (\n          <YesExample maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x2\" {...props} />\n        ),\n        NoExample: (props) => (\n          <NoExample maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x2\" {...props} />\n        ),\n        Heading2,\n      }}\n    >\n      {children}\n    </MDXProvider>\n  );\n}\n\nexport default MarkdownRenderer;\n"],"sourceRoot":""}