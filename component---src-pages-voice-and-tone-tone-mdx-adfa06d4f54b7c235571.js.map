{"version":3,"sources":["webpack://nulogy.design/./src/pages/voice-and-tone/tone.mdx","webpack://nulogy.design/./src/components/MDXComponents.js","webpack://nulogy.design/./src/components/MarkdownRenderer.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent","YesExample","children","fontStyle","display","position","top","icon","color","mr","NoExample","h1","maxWidth","COPY_WIDTH","m","h2","mt","mx","h3","h4","p","mb","blockquote","fontSize","ul","li","a","table","style","width","textAlign","margin","Alert","Heading2"],"mappings":"8OAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,yBACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,2BACA,yLACA,mHACA,mCACA,+iBACA,qCACA,yfACA,2CACA,ihBAKJH,EAAWI,gBAAiB,G,wHC9BfC,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAaJ,GAAhB,8BACxB,gBAAC,KAAD,eAAKK,UAAU,UAAaL,GAC1B,gBAAC,KAAD,CAAKM,QAAQ,SAASC,SAAS,WAAWC,IAAI,QAC5C,gBAAC,KAAD,CAAMC,KAAK,QAAQC,MAAM,QAAQC,GAAG,QAErCP,IAIQQ,EAAY,SAAC,GAAD,IAAGR,EAAH,EAAGA,SAAaJ,GAAhB,8BACvB,gBAAC,KAAD,eAAKK,UAAU,UAAaL,GAC1B,gBAAC,KAAD,CAAKM,QAAQ,SAASC,SAAS,WAAWC,IAAI,QAC5C,gBAAC,KAAD,CAAMC,KAAK,QAAQC,MAAM,MAAMC,GAAG,QAEnCP,IC0DL,MA3DA,YAAyC,IAAbA,EAAY,EAAZA,SAC1B,OACE,gBAAC,KAAD,CACEL,WAAY,CACVc,GAAI,SAACb,GAAD,OAAW,gBAAC,KAAD,eAAUc,SAAUC,KAAYC,EAAE,UAAahB,KAC9DiB,GAAI,SAACjB,GAAD,OACF,gBAAC,KAAD,eAAUc,SAAUC,KAAYG,GAAG,KAAKC,GAAG,QAAWnB,KAExDoB,GAAI,SAACpB,GAAD,OACF,gBAAC,KAAD,eAAUc,SAAUC,KAAYG,GAAG,KAAKC,GAAG,QAAWnB,KAExDqB,GAAI,SAACrB,GAAD,OACF,gBAAC,KAAD,eAAUc,SAAUC,KAAYG,GAAG,KAAKC,GAAG,QAAWnB,KAExDsB,EAAG,SAACtB,GAAD,OACD,gBAAC,KAAD,eAAMc,SAAUC,KAAYQ,GAAG,KAAKJ,GAAG,QAAWnB,KAEpDwB,WAAY,SAACxB,GAAD,OACV,gBAAC,KAAD,eACEc,SAAUC,KACVU,SAAS,OACTF,GAAG,KACHJ,GAAG,QACCnB,KAGR0B,GAAI,SAAC1B,GAAD,OACF,gBAAC,KAAD,eAAMc,SAAUC,KAAYQ,GAAG,KAAKJ,GAAG,QAAWnB,KAEpD2B,GAAI,SAAC3B,GAAD,OAAW,gBAAC,KAAD,eAAUc,SAAUC,MAAgBf,KACnD4B,EAAG,SAAC5B,GAAD,OAAW,gBAAC,KAAD,eAAMc,SAAUC,MAAgBf,KAC9C6B,MAAO,SAAC7B,GAAD,OACL,uCACE8B,MAAO,CACLC,MAAO,OACPC,UAAW,OACXlB,SAAUC,KACVkB,OAAQ,cAENjC,KAGRkC,MAAO,SAAClC,GAAD,OACL,gBAAC,KAAD,eAAOc,SAAUC,KAAYC,EAAE,SAASO,GAAG,MAASvB,KAEtDG,WAAY,SAACH,GAAD,OACV,gBAAC,EAAD,eAAYc,SAAUC,KAAYC,EAAE,SAASO,GAAG,MAASvB,KAE3DY,UAAW,SAACZ,GAAD,OACT,gBAAC,EAAD,eAAWc,SAAUC,KAAYC,EAAE,SAASO,GAAG,MAASvB,KAE1DmC,gBAGD/B","file":"component---src-pages-voice-and-tone-tone-mdx-adfa06d4f54b7c235571.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/content-guide/content-guide/src/components/MarkdownRenderer.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Tone`}</h1>\n    <p>{`The tone of our voice should take into consideration the situation in which the text is read. There are many different factors that will determine a tone of voice.`}</p>\n    <p>{`Here are some helpful tips to help you choose an appropriate tone of voice in which to write:`}</p>\n    <h2>{`Gain context`}</h2>\n    <p>{`Understand who you are writing for. Many different people with many different backgrounds and job titles might read your words. It is imperative that you know who is your audience. Once youâ€™ve done that work, consider the situations that might lead a user to read your text. Your tone should be different when you provide instructions versus when you inform the user of a success. Our application is full of different types of scenarios. Always ensure that you employ the principles of our voice to maintain consistency across scenarios.`}</p>\n    <h2>{`Employ empathy`}</h2>\n    <p>{`It is one thing to understand who you are writing for and what situation they are in at a given time. It is another thing completely to truly empathize with them. Once you have done the work to understand the user, put yourself in their shoes. This will help you to determine the most effective way to communicate. Passive voice, for example, is only permitted when writing error messages because no one wants to be told that they did something wrong when they troubleshoot an error.`}</p>\n    <h2>{`Vary sentence length`}</h2>\n    <p>{`In general, shorter sentences are preferred. When a sentence is short and to the point it is easier to understand and easier to translate. That said, one way to engage a reader and to convey tone is to vary sentence length. This helps to imbue personality into your writing. It also helps to avoid a robotic tone in your paragraphs. It is best to include no more than two distinct thoughts in a single sentence. More than two distinct points in a sentence can confuse and often results in a run-on sentence.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\";\nimport { Icon, Box } from \"@nulogy/components\";\n\nexport const YesExample = ({ children, ...props }) => (\n  <Box fontStyle=\"italic\" {...props}>\n    <Box display=\"inline\" position=\"relative\" top=\"half\">\n      <Icon icon=\"check\" color=\"green\" mr=\"x2\" />\n    </Box>\n    {children}\n  </Box>\n);\n\nexport const NoExample = ({ children, ...props }) => (\n  <Box fontStyle=\"italic\" {...props}>\n    <Box display=\"inline\" position=\"relative\" top=\"half\">\n      <Icon icon=\"close\" color=\"red\" mr=\"x2\" />\n    </Box>\n    {children}\n  </Box>\n);\n","import React from \"react\";\nimport { MDXProvider } from \"@mdx-js/react\";\nimport {\n  Alert,\n  Text,\n  Link,\n  List,\n  ListItem,\n  Heading1,\n  Heading2,\n  Heading3,\n  Heading4,\n} from \"@nulogy/components\";\nimport { COPY_WIDTH } from \"./CONSTANTS\";\nimport { YesExample, NoExample } from \"./MDXComponents\";\n\nfunction MarkdownRenderer({ children }) {\n  return (\n    <MDXProvider\n      components={{\n        h1: (props) => <Heading1 maxWidth={COPY_WIDTH} m=\"0 auto\" {...props} />,\n        h2: (props) => (\n          <Heading2 maxWidth={COPY_WIDTH} mt=\"x6\" mx=\"auto\" {...props} />\n        ),\n        h3: (props) => (\n          <Heading3 maxWidth={COPY_WIDTH} mt=\"x4\" mx=\"auto\" {...props} />\n        ),\n        h4: (props) => (\n          <Heading4 maxWidth={COPY_WIDTH} mt=\"x4\" mx=\"auto\" {...props} />\n        ),\n        p: (props) => (\n          <Text maxWidth={COPY_WIDTH} mb=\"x4\" mx=\"auto\" {...props} />\n        ),\n        blockquote: (props) => (\n          <Text\n            maxWidth={COPY_WIDTH}\n            fontSize=\"24px\"\n            mb=\"x4\"\n            mx=\"auto\"\n            {...props}\n          />\n        ),\n        ul: (props) => (\n          <List maxWidth={COPY_WIDTH} mb=\"x4\" mx=\"auto\" {...props} />\n        ),\n        li: (props) => <ListItem maxWidth={COPY_WIDTH} {...props} />,\n        a: (props) => <Link maxWidth={COPY_WIDTH} {...props} />,\n        table: (props) => (\n          <table\n            style={{\n              width: \"100%\",\n              textAlign: \"left\",\n              maxWidth: COPY_WIDTH,\n              margin: \"32px auto\",\n            }}\n            {...props}\n          />\n        ),\n        Alert: (props) => (\n          <Alert maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x4\" {...props} />\n        ),\n        YesExample: (props) => (\n          <YesExample maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x2\" {...props} />\n        ),\n        NoExample: (props) => (\n          <NoExample maxWidth={COPY_WIDTH} m=\"0 auto\" mb=\"x2\" {...props} />\n        ),\n        Heading2,\n      }}\n    >\n      {children}\n    </MDXProvider>\n  );\n}\n\nexport default MarkdownRenderer;\n"],"sourceRoot":""}